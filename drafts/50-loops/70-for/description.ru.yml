---

name: Цикл For
theory: |

  Цикл `while` идеален для ситуаций, когда количество итераций неизвестно заранее, например при поиске простого числа. В остальных ситуациях предпочтительным является использование цикла `for`. Посмотрим уже известный нам вариант с переворотом строки:

  ```php
  <?php

  function reverseString($str)
  {
    $index = strlen($str) - 1;
    $reversedString = '';
    for ($index; $index >= 0; $i--) {
      $currentChar = $str[$index];
      $reversedString = "{$reversedString}{$currentChar}";
    }

    return $reversedString;
  }
  ```

  Главное что меняется, цикл вбирает в свое определение не только предикат, но и начальное значение счетчика, а также описание того, как он меняется. Само тело цикла, больше не содержит операции изменения счетчика. `for` внутри скобок содержит три определения, разделенных точкой с запятой:

  1. Начальное значение счетчика
  1. Предикат
  1. Изменение счетчика

  В остальном принцип работы на 100% такой же как и у цикла `while`.

instructions: |

  Реализуйте функцию `sumOfRange`, которая считает сумму элементов ряда. Ряд задается двумя занчениями, начальным и конечным. Например для ряда [4, 7] сумма считается так: 4 + 5 + 6 + 7. В нашем примере границы ряда так же участвуют в суммировании.

  ```php
  <?php

  sumOfRange(1, 1); // => 1
  sumOfRange(1, 2); // => 3
  ```

  Не используйте входной аргумент как начальное значение счетчика. Изменять входные аргументы считается плохой практикой (такой код сложнее понимать и отлаживать). Выполните начальное присвоение: `$i = $startIndex`.

tips: []
