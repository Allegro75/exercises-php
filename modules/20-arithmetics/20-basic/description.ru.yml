---

name: Арифметические операции
theory: |
  Для сложения двух чисел в математике мы пишем, например, `3 + 4`. В программировании — то же самое. Вот программа, складывающая два числа:

  ```php
  <?php

  // Не забываем точку с запятой в конце, так как каждая строчка в коде - инструкция.
  3 + 4;
  ```

  (Помните про комментарии? Выше в коде после символов `//` — комментарий от учителя).

  Арифметика в программировании практически не отличается от школьной арифметики.

  Строчка кода `3 + 4;` заставит интерпретатор сложить числа и узнать результат. Эта программа будет работать, но в ней нет смысла, потому что по сути **мы не даём команду** интерпретатору, мы просто говорим ему «смотри, сумма трёх и четырёх». В реальной работе недостаточно сообщать интерпретатору о математическом выражении. Например, при создании интернет-магазина недостаточно просить интерпретатор посчитать стоимость товаров в корзине, а нужно просить посчитать стоимость **И** показать цену покупателю.

  Нам нужно попросить интерпретатор сложить `3 + 4` **И** дать команду сделать что-то с результатом. Например, вывести его на экран:

  ```php
  <?php
  // снова не забываем точку с запятой в конце строчки
  print_r(3 + 4);
  ```

  После запуска на экране появится результат:

  ```
  7
  ```

  Кроме сложения доступны следующие операции:

  * `*` — умножение
  * `/` — деление
  * `-` — вычитание
  * `%` — [остаток от деления](https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D1%81_%D0%BE%D1%81%D1%82%D0%B0%D1%82%D0%BA%D0%BE%D0%BC)
  * `**` — возведение в степень

  Теперь давайте выведем на экран результат деления, а потом результат возведения в степень:

  ```php
  print_r(8 / 2);  // => 4
  print_r(3 ** 2); // => 9
  ```

  Иногда для удобства мы будем показывать в комментариях результат запуска строчек кода вот так: `=> РЕЗУЛЬТАТ`. Например, `// => 4`.

  Первая инструкция выведет на экран `4` (потому что 8 / 2 это 4), а вторая инструкция выведет на экран 9 (потому что 3<sup>2</sup> это 9).

  _(**Для любопытных: ** если запустить на компьютере программу `3 + 4;` без `print_r`, то на экране скорее всего можно будет увидеть `7`. Как будто вывод на экран был без команды для вывода на экран! Дело в том, что интерпретатор любит показывать свои внутренние вычисления. Представьте, что интерпретатор — это повар, а вычисление — это приготовление пирога. Если сказать повару «испеки пирог», то мы не получим пирог, ведь нужно явно попросить его «испеки пирог и принеси мне». Но если заглянуть на кухню, то можно увидеть: пирог испечён даже если мы не просили принести его. С интерпретатором то же самое: программа `3 + 4;` без `print_r` на самом деле посчитает ответ, и при этом покажет свою «внутреннюю кухню». Но нужно понимать, что это не команда вывода на экран, это просто особенность работы интерпретатора. Для вывода на экран нужно использовать `print_r`.)._

instructions: |

  Выведите на экран результат деления числа `81` на `9`.

tips:
  - Всегда отбивайте арифметические операторы пробелами от самих чисел (операндов) – это хороший стиль программирования. Поэтому в наших примерах `print_r(3 + 4)`, а не `print_r(3+4)`.
  - Деление на ноль приводит к ошибке. Чтобы его не допустить, нужно знать про условные конструкции (о них вы узнаете в следующих уроках).
  - "Если в редакторе есть запись `// BEGIN` и `// END`, то код нужно писать между этими строчками."
