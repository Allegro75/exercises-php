---

name: Аргументы
theory: |

  ```php
  <?php

  function sayMotto()
  {
      print_r('Motto: We Do Not Sow');
  }
  ```

  Функция `sayMotto` выводит на экран девиз одной семьи. С практической точки зрения функция не очень полезна. Текущая реализация не позволяет менять выводимый на экран текст, а это значит, что придется писать новую функцию на каждый новый девиз.

  Попробуем ее обобщить для работы со всеми девизами используя возможность передачи аргументов:

  ```php
  <?php

  function sayMotto($motto)
  {
      print_r("Motto: {$motto}");
  }
  ```

  Теперь функция принимает один аргумент и выводит его на экран в составе строки. Вызов:

  ```php
  <?php

  sayMotto('Winter is coming')
  // => Motto: Winter is coming
  ```

  Чисто синтаксически описание аргументов в определении функции ничем не отличается от описания аргументов при вызове функции. Фактически нам нужно перечислить список входных параметров через запятую внутри круглых скобок. Вот пример с двумя параметрами:

  ```php
  <?php

  function sayMotto($motto, $prefix)
  {
      print_r("{$prefix}: {$motto}");
  }
  ```

  Вызов:

  ```php
  <?php

  sayMotto('Winter is coming', 'Motto');
  // => Motto: Winter is coming
  ```

  Количество аргументов может быть любым, главное, чтобы у каждого аргумента было свое имя. И не забывайте про их позиции. Порядок определения и передачи важен: в каком порядке аргументы стоят при определении функции, в таком же порядке они должны передаваться при вызове.

  Есть одна особенность в определении функции, которую новички часто не понимают: в качестве аргументов могут быть только переменные. Такой код не будет работать:

  ```php
  <?php

  function sayMotto('Winter is coming')
  {
      // какой-нибудь код
  }
  ```

  Вместо переменной в определении функции использована строка. Такой код упадет с синтаксической ошибкой. Если хорошо над ним подумать, то должно стать очевидно, что такая запись бесмысленна. Аргумент на то и аргумент, что он может быть разным. С помощью аргументов мы говорим вызывающему коду, что он может вызывать нашу функцию для разных данных. А если у нас есть конкретные данные, которые мы не хотим давать менять, то их нужно просто использовать, без затрагивания аргументов.

instructions: |

  Сэму для отрисовки карт понадобилась функция, которая печатает на экран непрерывные последовательности произвольных символов. Например `+++++`, `__)__)__)` или `[x][x][x][x]`. Ему хочется просто указать набор символов для повторения и количество повторений, а функция вывела бы результат на экран.

  Реализуйте такую функцию для Сэма. Она должна называться `printSeq`. Первам аргументом она должна принимать строку с символами, а вторым аргументом — количество повторений.

  Для генерации повторений используйте уже существующую функцию `str_repeat`, которая принимает на вход последовательность первым аргументом и количество повторений вторым.

tips: []
