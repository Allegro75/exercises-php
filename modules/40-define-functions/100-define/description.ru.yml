---

name: Определение функции
theory: |

  Синтаксис определения функции, включает множество элементов. Начнем рассматривать их постепенно, шаг за шагом создававая все более сложные функции:

  ```php
  <?php

  function sayMotto()
  {
      print_r('Moto: We Do Not Sow');
  }
  ```

  И вызов:

  ```php
  <?php

  sayMotto();
  ```

  Выше вы видите практически минимально возможное определение. Оно включает в себя ключевое слово `function` после которого, через пробел, идет имя функции. Имя выбирается исходя из того, что будет делать функция. Замыкают строку круглые скобки. До текущего момента, скобки с функциями использовались только для вызова функции. Здесь, как мы видим, они используются для определения. Важно понимать различия. В данном примере функция не вызывается, она не будет исполнена. Интерпретатор, встречая определение, создает ее. В PHP крайне легко отличить вызов от определения. В определении всегда присутствует ключевое слово `function` слева от имени функции.

  Ниже мы видим две фигурных скобки между вызов функции. Фигурные скобки обязательны. Их задача задавать блок кода, который составляет тело функции. Именно тело функции выполняется в момент ее вызова. С точки зрения синтаксиса языка, тело функции это программа внутри программы. Там можно писать практически все что угодно. В нашем примере телом является вызов функции `print_r`. Как видите синтаксис вызова точно такой же как и вне функции, вплоть до `;` в конце.

  Обратите внимание на отсутствие `;` после определения функции. Дело в том, что `;` ставится в конце выражений (если это выражение не является частью другого выражения). Определение функции выражением не является (именованных функций, как вы узнаете дальше в процессе обучения, определение функции может быть выражением и это крайне сильно влияет на то как пишется код), оно само по себе инструкция (указание интерпретатору). Соответственно мы не можем его использовать в составе других выражений и ему не нужна `;` в конце.

  Понятие "создать функцию" имеет много синонимов: "реализовать", "определить" и даже "заимплементить" (от слова implement). Все они встречаются в повседневной практике на работе.

  При повторном вызове функции, ее тело выполняется независимо от первого запуска. Что приведет к еще одному выводу на экран. Каждый последующий вызов работает точно так же.

instructions: |

  Реализуйте функцию `dracarys`, которая печатает на экран `phhh`;



tips: []
