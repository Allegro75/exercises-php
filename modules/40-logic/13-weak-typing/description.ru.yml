---

name: Слабая типизация
theory: |

  Особенно сильное влияние, слабая типизация оказывает на логический тип. Например такой код `print_r(0 || 1)` выведет на экран `1`. Дело в том что php, не стесняясь, в логических операциях все данные приводит к boolean типу. Существует довольно простой свод правил, по которым происходят данные преобразования:

  * Как `false` рассматриваются: `0`, `''`, `null` и некоторые другие, не рассмотренные типы данных.
  * Как `true` рассматривается все остальное.

  И если `null` рассматривается как `false` почти во всех языках, то с остальными значениями не так все просто. В некоторых языках они рассматриваются как `false` в некоторых как `true`. Не забывайте о том что php всего лишь один из языков программирования, а не истинна в последней инстанции. То как реализованы многие вещи в php не пример для подражания, а историческое наследие.

  Справедливо и обратное, `true` и `false` могут (и будут) преобразовываться к другим типам данных. Например если попробовать распечатать `false` используя `print_r`, то на экран не будет выведено ничего. Теперь вы знаете почему, php, при выводе, преобразует `false` в строчку, которой является пустая строка, а вот `true` преобразуется в строчку `'1'`.

  В предыдущем уроке, мы рассмотрели операторы сравнения `===` и `!==`. Так вот их отличие от подобных операторов `!=` и `==`, в том что они дополнительно проверяют совпадение типов, тогда как использование `!=` и `==` может приводить к неявному преобразованию типов для выполнения сравнения. По этой причине лучше избегать их использования.

instructions: |

  Напишите функцию `isFalsy`, которая проверяет, трактуется ли переданное значение как ложное с точки зрения php. Для выполнения этой проверке вам понадобится сравнить `false` с переданным значением используя `==`.

tips:
  - |
    [Booleans](http://php.net/manual/en/language.types.boolean.php)
