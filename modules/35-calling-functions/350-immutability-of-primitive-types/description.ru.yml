---

name: Неизменяемость и примитивные типы
theory: |

  В этом модуле мы немного поработали с разными функциями и готовы обсудить одну важную тему. Примитивные типы в php - неизменяемы. В будущих уроках и заданиях мы будем использовать как самописные, так и функции входящие в стандартную библиотеку. Но какие бы мы функции не использовали, они не могут изменить данные с которыми мы работаем, если мы говорим про примитивные типы данных, например строки и числа. Возьмем как пример функцию, делающую заглавной первую букву переданной строки. Само описание функции звучит так, как будто строка будет изменена, но этого не произойдет, более того, так нельзя сделать в принципе. Любая подобная функция принимает на вход данные и возвращает новые данные. Посмотрим пример:

  ```php
  <?php

  $house = 'bolton';
  $newHouse = ucfirst($house); // делаем первую букву заглавной
  print_r($house); // bolton
  print_r($newHouse); // Bolton
  ```

  Как видите, если распечатать переменную со строкой, то можно увидеть что строка не изменилась. Это правило не имеет исключений, с примитивными типами только так. Такой подход имеет серьезные (и позитивные) следствия, с которыми мы познакомимся позже.

  Но сами переменные изменяемы, на то они и переменные. Та же программа выше может выглядеть так:

  ```php
  <?php

  $house = 'bolton';
  $house = ucfirst($house);
  print_r($house); // Bolton
  ```

  Я рекомендую избегать переписывания переменной там где можно обойтись без переписывания (как в примере выше). Программы наполненные постоянно меняющимися переменными, крайне сложно понимать. Реальное место где без переменных никак - циклы, с которыми мы еще познакомимся. Во всех остальных местах, по сути, они могут (и должны) использоваться как константы.

instructions: |

  В качестве тренировки, переведите строчку, записанную в переменную `$str`, в верхний регистр используя функцию `strtoupper` и перепешите переменную `$str`.



tips: []
