---

name: Выражения в определениях
theory: |

  Переменные полезны не только для хранения и переиспользования информации, но и для упрощения сложных вычислений. Давайте рассмотрим пример: нужно перевести рубли в евро через доллары. Подобные конвертации через промежуточную валюту часто делают банки при покупках за рубежом.

  Для начала переведем рубли в доллары. Допустим, что один доллар — 60 рублей:

  ```php
  <?php

  $dollars = 50 * 60;
  print_r($dollars);
  ```

  В предыдущем уроке мы записывали в переменную конкретное значение. А здесь `$dollars = 50 * 60;` справа от знака равно находится **выражение**. Интерпретатор вычислит результат — `3000` — и запишет его в переменную. С точки зрения интерпретатора не важно, что перед ним: `3000` или `50 * 60`, для него оба варианта — выражения, которые надо вычислить. И они вычисляются в одно и тоже значение — `3000`.

  Любая строка — выражение. Конкатенация строк — тоже выражение. Когда интерпретатор видит выражение, он обрабатывает его и генерирует результат — **значение выражения**. Вот несколько примеров выражений, а в комментариях справа от каждого выражения — итоговое значение:

  ```php
  3000             // => 3000
  50 * 60          // => 3000
  120 / 10 * 2     // => 24

  "hello"          // => "hello"
  "Good" . "will"  // => "Goodwill"
  ```

  Правила построения кода (грамматика языка) таковы, что в тех местах, где ожидается выражение, можно поставить любое вычисление (не только математическое, но и, например, строковое — как конкатенация), и программа останется работоспособной. По этой причине невозможно описать и показать все случаи использования всех операций.

  Программы состоят из множества комбинаций выражений, и понимание этой концепции — один из ключевых шагов в вашем пути.

  Основываясь на сказанном выше, подумайте, сработает ли такой код?

  ```php
  <?php

  $who = "dragon's" . 'mother';
  print_r($who);
  ```

  Запустите его на [repl.it](https://repl.it/languages/php) и поэкспериментируйте.

  Вернемся к нашей валютной программе. Запишем рубли в отдельную переменную, потом вычислим доллары, а потом вычислим евро, умножив доллары на `1.2`:

  ```php
  <?php

  $rubles = 50;
  $dollars = $rubles * 60; // => 3000
  $euros = $dollars * 1.2; // => 3600

  print_r($euros);
  ```

  Любая переменная может быть частью любого выражения. В момент вычисления вместо имени переменной подставляется её значение.

  Интерпретатор вычисляет значение `$dollars` до того, как эта  переменная начнет использоваться в других выражениях. Когда подходит момент использования переменной, PHP «знает» значение, потому что уже вычислил его.

instructions: |

  Напишите программу, которая берет исходное количество евро, записанное в переменную `$euros`, переводит евро в доллары и выводит на экран. Затем полученное значение переводит в рубли и выводит на новой строчке.

  Пример вывода для 100 евро:

  ```
  80
  480
  ```

  Считаем, что 1 доллар = 0.8 евро = 60 рублей.

tips:
  - |
    Для перевода строки можно вставить вывод `\n` между выводом долларов и рублей.
