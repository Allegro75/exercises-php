---

name: Магические числа
theory: |

  Вспомним один из прошлых уроков:

  ```php
  <?php

  $rubles = 50;
  $dollars = $rubles * 60; // => 3000
  $euros = $dollars * 1.2; // => 3600

  print_r($euros);
  ```

  С точки зрения профессиональной разработки, такой "пахнет". Так называют код, который не соответствует Best Practices (лучшим практикам). И причина здесь вот в чем. Подозреваю, что уже сейчас глядя на числа `60` и `1.2` вы задаетесь вопросом «что это за числа?». А представьте что будет через месяц! А если в код посмотрит другой человек? В нашем примере, контекст восстанавливается благодаря грамотному именованию, но в реальной жизни код значительно сложнее и так легко догадаться до смысла этих чисел - практически нереально.

  Этот "запах" называют Magic Numbers (магические числа). Числа происхождение которых невозможно понять без глубокого знания происходящего внутри данного участка кода.

  Выход из ситуации простой как две копейки. Достаточно создать переменные с правильными именами, как все встанет на свои места.

  ```php
  <?php

  $roublesInDollar = 60;
  $dollarsInEuro = 1.2;

  $rubles = 50;
  $dollars = $rubles * $roublesInDollar; // => 3000
  $euros = $dollars * $dollarsInEuro;    // => 3600
  print_r($euros);
  ```

  Обратите внимание на следующие детали:

    * Именование pascalCase
    * Для большей понятности я отделил переменные, которые имеют смысл не зависимо от вычисления ниже
    * Хорошо именованный и структурированный код, как правило, чуть длиннее аналога без промежуточных вычислений. Это нормально. Код должен читаться.

instructions: |

  Проанализируйте код и добавьте недостающие переменные.


tips: []
