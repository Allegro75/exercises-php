---

name: Возврат из циклов
theory: |

  Работа с циклами обычно сводится к двум ситуациям. Первая, накопление результата во время итераций и работа с ним после цикла. Переворачивание строки, как раз относится к такому варианту. Вторая, выполнение цикла до достижения необходимого результата и выход. Ко второй ситуации например относится задача поиска простых чисел. Напомню что простым, называется число, которое делится только само на себя и единицу.

  Самый простой алгоритм поиска, пытаться делить искомое число `x` на все числа от двух до `x - 1` и смотреть остаток. Если остаток от деления никогда не равен нулю, значит перед нами простое число. Если подумать немного больше, то можно заметить что если число не делится на половину от своего значения (плюс минус 1), например 11 не делится на 5, то 11 гарантированно не будет делиться на числа больше 5 не считая самого числа. А значит можно провести небольшую оптимизацию, и проверять деление только до `x / 2`.

  ```php
  <?php

  function isPrime($number)
  {
      $divider = 2;
      while ($divider < $number / 2) {
          if ($number % $divider === 0) {
            return false;
          }

          $divider += 1;
      }

      return true;
  }

  isPrime(2); // false
  ```

  Алгоритм построен таким образом, что если во время последовательного деления всех чисел до `x / 2` находится хоть одно, которое делится без остатка на исходное, то перед нами не простое число, а значит дальнейшие вычисления не имеют смысла. В этом месте стоит возврат `false`. И только если цикл отработал целиком, можно сделать вывод что число простое, так как не было найдено ни одного числа, которое бы делилось без остатка на `x`. В остальном перед нами классический цикл со счетчиком, его инициализацией и изменением в теле.

instructions: |

  Реализуйте функцию `isContain`, которая проверяет (регистрозависимо), содержит ли строка указанную букву. Функция принимает два параметра:

  * Строка
  * Буква для поиска

  Пример вызова:

  ```php
  <?php

  isContain('Renly', 'R'); // true
  isContain('Renly', 'r'); // false
  isContain('Tommy', 'm'); // true
  isContain('Tommy', 'd'); // false
  ```
  ```

tips: []
